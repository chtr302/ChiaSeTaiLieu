import os,requests,json
from dotenv import load_dotenv
load_dotenv()

MODEL_NAME = os.getenv('AI_MODEL')
MODEL_API = os.getenv('AI_API')

class DatabaseAI:
    def __init__(self, model_name = MODEL_NAME, api = MODEL_API):
        self.model_name = model_name
        self.api = api
        self.generation_api = f'{api}/api/generate'

    def _call_model(self, prompt, temperature=0.1):
        try:
            payload = {
                "model": self.model_name,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": temperature,
                    "top_p": 0.9,
                    "top_k": 40
                }
            }
            response = requests.post(self.generation_api, json=payload, timeout=500)
            if response.status_code == 200:
                result = response.json()
                return result.get('response', '').strip()
            else:
                return f"Error: HTTP {response.status_code}"
        except requests.exceptions.RequestException as e:
            return f"Hinh nhu chua bat Ollama: {str(e)}"
    
    def generate_sql(self, question, schema_info):
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia SQL. Nhi·ªám v·ª•: t·∫°o c√¢u SQL t·ª´ c√¢u h·ªèi ti·∫øng Vi·ªát.

        === DATABASE SCHEMA ===
        {schema_info}

        === QUY T·∫ÆC ===
        1. CH·ªà tr·∫£ v·ªÅ c√¢u SQL, KH√îNG gi·∫£i th√≠ch
        2. S·ª≠ d·ª•ng LIMIT cho SELECT th√¥ng th∆∞·ªùng (t·ªëi ƒëa 20 rows)
        3. COUNT, SUM, AVG kh√¥ng c·∫ßn LIMIT
        4. KH√îNG s·ª≠ d·ª•ng: DELETE, UPDATE, DROP, INSERT, ALTER, TRUNCATE
        5. S·ª≠ d·ª•ng JOIN khi c·∫ßn thi·∫øt
        6. T√™n table/column ph·∫£i CH√çNH X√ÅC theo schema
        7. S·ª≠ d·ª•ng LIKE '%keyword%' cho t√¨m ki·∫øm text
        8. S·∫Øp x·∫øp k·∫øt qu·∫£ h·ª£p l√Ω (ORDER BY)

        === V√ç D·ª§ ===
        C√¢u h·ªèi: "T√†i li·ªáu n√†o ƒë∆∞·ª£c xem nhi·ªÅu nh·∫•t?"
        SQL: SELECT t.TieuDe, s.HoVaTen, t.LuotXem FROM TaiLieu t JOIN SinhVien s ON t.MaSinhVien = s.MaSinhVien ORDER BY t.LuotXem DESC LIMIT 10;

        C√¢u h·ªèi: "TRAN CONG HAU ƒë√£ ƒëƒÉng bao nhi√™u t√†i li·ªáu?"
        SQL: SELECT COUNT(*) as SoLuongTaiLieu FROM TaiLieu t JOIN SinhVien s ON t.MaSinhVien = s.MaSinhVien WHERE s.HoVaTen = 'TRAN CONG HAU';

        C√¢u h·ªèi: "T√¨m t√†i li·ªáu v·ªÅ AI"
        SQL: SELECT t.TieuDe, t.MoTa, s.HoVaTen FROM TaiLieu t JOIN SinhVien s ON t.MaSinhVien = s.MaSinhVien WHERE t.TieuDe LIKE '%AI%' OR t.MoTa LIKE '%AI%' OR t.Tags LIKE '%AI%' LIMIT 10;

        === C√ÇU H·ªéI ===
        {question}

        === SQL ===
        """
        sql = self._call_model(prompt, temperature=0.1)
        cleaned_sql = self._clean_sql(sql)
        
        return cleaned_sql
    
    def _clean_sql(self, sql: str) -> str:
        """L√†m s·∫°ch SQL query"""
        if not sql or sql.startswith("Error") or sql.startswith("L·ªói"):
            return ""

        if "```" in sql:
            lines = sql.split('\n')
            sql_lines = []
            in_code_block = False
            
            for line in lines:
                line_stripped = line.strip()

                if line_stripped.startswith('```'):
                    in_code_block = not in_code_block
                    continue

                if in_code_block and line_stripped:
                    sql_lines.append(line_stripped)

            if sql_lines:
                sql = ' '.join(sql_lines)
            else:
                sql = sql.replace('```sql', '').replace('```', '').strip()

        sql = sql.strip()

        if sql.lower().startswith('sql:'):
            sql = sql[4:].strip()

        sql = sql.rstrip(';')

        sql = ' '.join(sql.split())
        
        return sql.strip()
    
    def format_result(self, question, query, data):
        if not data:
            return "‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o."

        prompt = f"""
        T·∫°o c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc t·ª´ d·ªØ li·ªáu sau:

        C√¢u h·ªèi: "{question}"
        D·ªØ li·ªáu: {json.dumps(data, ensure_ascii=False, default=str)}

        Y√äU C·∫¶U:
        - S·ª≠ d·ª•ng emoji cho d·ªÖ nh√¨n (üìö, üìñ, üë§, üëÅÔ∏è)
        - Format: **T√™n t√†i li·ªáu** r·ªìi th√¥ng tin ph·ª•
        - M·ªói k·∫øt qu·∫£ 1-2 d√≤ng, kh√¥ng qu√° d√†i
        - Kh√¥ng d√πng b·∫£ng markdown
        - T·ªëi ƒëa 10 k·∫øt qu·∫£

        V√ç D·ª§ FORMAT:
        üìö **T√¨m th·∫•y X k·∫øt qu·∫£:**

        **1. T√™n t√†i li·ªáu**
           üìñ M√¥n h·ªçc | üë§ T√°c gi·∫£ | üëÅÔ∏è X l∆∞·ª£t xem

        TR·∫¢ L·ªúI:
        """
        
        response = self._call_model(prompt, temperature=0.2)
        return response
    
    def detect_intent(self, question: str) -> str:
        """Ph√¢n lo·∫°i intent c·ªßa c√¢u h·ªèi"""
        prompt = f"""
        Ph√¢n lo·∫°i c√¢u h·ªèi sau v√†o 1 trong c√°c category:

        CATEGORIES:
        - database: c√¢u h·ªèi v·ªÅ d·ªØ li·ªáu, th·ªëng k√™, t√¨m ki·∫øm trong h·ªá th·ªëng
        - document_qa: c√¢u h·ªèi v·ªÅ n·ªôi dung c·ª• th·ªÉ c·ªßa 1 t√†i li·ªáu  
        - general: ch√†o h·ªèi, gi·ªõi thi·ªáu chung

        EXAMPLES:
        "T√†i li·ªáu n√†o ph·ªï bi·∫øn nh·∫•t?" ‚Üí database
        "M√¥n h·ªçc n√†o c√≥ nhi·ªÅu t√†i li·ªáu?" ‚Üí database
        "T√†i li·ªáu n√†y n√≥i v·ªÅ g√¨?" ‚Üí document_qa
        "Xin ch√†o" ‚Üí general
        "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Spring Boot?" ‚Üí document_qa

        QUESTION: "{question}"
        CATEGORY:
        """
                
        intent = self._call_ollama(prompt, temperature=0.1)
        return intent.strip().lower()
            
    def generate_search_keywords(self, question: str) -> list:
        """T·∫°o keywords cho t√¨m ki·∫øm t·ª´ c√¢u h·ªèi"""
        prompt = f"""
        T·ª´ c√¢u h·ªèi sau, tr√≠ch xu·∫•t c√°c t·ª´ kh√≥a quan tr·ªçng ƒë·ªÉ t√¨m ki·∫øm t√†i li·ªáu.

        C√¢u h·ªèi: "{question}"

        Quy t·∫Øc:
        - Tr·∫£ v·ªÅ t·ªëi ƒëa 5 t·ª´ kh√≥a
        - M·ªói t·ª´ kh√≥a tr√™n 1 d√≤ng
        - Ch·ªâ tr·∫£ v·ªÅ t·ª´ kh√≥a, kh√¥ng gi·∫£i th√≠ch
        - ∆Øu ti√™n: t√™n c√¥ng ngh·ªá, m√¥n h·ªçc, ch·ªß ƒë·ªÅ ch√≠nh

        T·ª´ kh√≥a:
        """
        
        keywords_text = self._call_model(prompt, temperature=0.2)
        keywords = [kw.strip() for kw in keywords_text.split('\n') if kw.strip()]
        return keywords[:5]
    
    def validate_sql(self, sql: str) -> dict:
        """Validate SQL query v·ªÅ m·∫∑t security v√† syntax"""
        forbidden_keywords = [
            'DELETE', 'UPDATE', 'DROP', 'INSERT', 'ALTER', 
            'TRUNCATE', 'CREATE', 'GRANT', 'REVOKE'
        ]
        
        sql_upper = sql.upper()
        for keyword in forbidden_keywords:
            if keyword in sql_upper:
                return {
                    "valid": False,
                    "error": f"T·ª´ kh√≥a '{keyword}' kh√¥ng ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng"
                }

        if not any(sql_upper.strip().startswith(cmd) for cmd in ['SELECT', 'SHOW', 'DESCRIBE']):
            return {
                "valid": False,
                "error": "Ch·ªâ cho ph√©p c√¢u l·ªánh SELECT, SHOW, DESCRIBE"
            }

        if (sql_upper.strip().startswith('SELECT') and 
            'LIMIT' not in sql_upper and
            not any(func in sql_upper for func in ['COUNT(', 'SUM(', 'AVG(', 'MAX(', 'MIN('])):
            return {
                "valid": False,
                "error": "C√¢u SELECT ph·∫£i c√≥ LIMIT ƒë·ªÉ gi·ªõi h·∫°n k·∫øt qu·∫£ (tr·ª´ khi s·ª≠ d·ª•ng COUNT, SUM, AVG)"
            }
            
        return {"valid": True}
    
    def validate_sql_query(self, query: str) -> tuple[bool, str]:
        """Validate SQL query for safety"""
        query_lower = query.lower().strip()

        if not query_lower.startswith(('select', 'show', 'describe', 'explain')):
            return False, "Ch·ªâ cho ph√©p c√°c c√¢u l·ªánh SELECT, SHOW, DESCRIBE, EXPLAIN"

        dangerous_keywords = ['drop', 'delete', 'insert', 'update', 'alter', 'create', 'truncate']
        for keyword in dangerous_keywords:
            if keyword in query_lower:
                return False, f"Kh√¥ng cho ph√©p s·ª≠ d·ª•ng t·ª´ kh√≥a: {keyword.upper()}"

        if query_lower.startswith('select'):

            has_aggregate = any(func in query_lower for func in ['count(', 'sum(', 'avg(', 'max(', 'min(', 'group by'])
            has_show_tables = 'show tables' in query_lower or 'describe' in query_lower
            has_limit = 'limit' in query_lower
            
            if not has_aggregate and not has_show_tables and not has_limit:
                query = query.rstrip(';') + ' LIMIT 50'
                return True, query
    
        return True, query
    
    def _classify_intent(self, question):
        prompt = f"""
        Ph√¢n lo·∫°i c√¢u h·ªèi sau v√†o 1 trong c√°c category. CH·ªà tr·∫£ v·ªÅ t√™n category, KH√îNG gi·∫£i th√≠ch.

        CATEGORIES:
        - greeting: ch√†o h·ªèi, xin ch√†o
        - help: h·ªèi v·ªÅ h∆∞·ªõng d·∫´n, help, l√†m g√¨
        - capabilities: h·ªèi v·ªÅ kh·∫£ nƒÉng, c√≥ th·ªÉ l√†m g√¨, ch·ª©c nƒÉng
        - database: t√¨m ki·∫øm t√†i li·ªáu, th·ªëng k√™, top, ph·ªï bi·∫øn, s·ªë l∆∞·ª£ng
        - general: c√¢u h·ªèi kh√°c

        EXAMPLES:
        "Xin ch√†o" ‚Üí greeting
        "Hello" ‚Üí greeting
        "Help" ‚Üí help  
        "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng" ‚Üí help
        "B·∫°n c√≥ th·ªÉ l√†m g√¨?" ‚Üí capabilities
        "Ch·ª©c nƒÉng c·ªßa b·∫°n" ‚Üí capabilities
        "T√†i li·ªáu ph·ªï bi·∫øn nh·∫•t" ‚Üí database
        "Top 10 t√†i li·ªáu" ‚Üí database
        "C√≥ bao nhi√™u t√†i li·ªáu" ‚Üí database
        "T√¨m t√†i li·ªáu Java" ‚Üí database

        QUESTION: "{question}"
        CATEGORY:
        """
        try:
            response = self._call_model(prompt)
            intent = response.strip().lower()
            valid_intents = ["greeting", "help", "capabilities", "database", "general"]
            if intent not in valid_intents:
                return "general"
            return intent
        except:
            return "general"
    
    def classify_intent(self, user_input: str) -> str:
        """Classify user intent"""
        input_lower = user_input.lower().strip()
        
        # Database queries
        database_keywords = [
            'm√¥n h·ªçc', 'subject', 't√†i li·ªáu', 'document', 'file',
            'danh s√°ch', 'list', 'c√≥ nh·ªØng', 'c√≥ g√¨', 'bao nhi√™u',
            't√¨m', 'search', 'xem', 'show', 'hi·ªÉn th·ªã'
        ]
        
        if any(keyword in input_lower for keyword in database_keywords):
            return 'database'
        
        # Greeting
        if any(word in input_lower for word in ['xin ch√†o', 'hello', 'hi', 'ch√†o']):
            return 'greeting'
        
        # Help
        if any(word in input_lower for word in ['help', 'h·ªó tr·ª£', 'gi√∫p', 'h∆∞·ªõng d·∫´n']):
            return 'help'
        
        return 'general'
    
    def smart_database_query(self, user_question: str) -> str:
        """Smart database query based on user question"""
        question_lower = user_question.lower().strip()
        
        try:
            # Common patterns
            if any(phrase in question_lower for phrase in ['m√¥n h·ªçc', 'subject']):
                if any(phrase in question_lower for phrase in ['c√≥ nh·ªØng', 'danh s√°ch', 'list']):
                    # Li·ªát k√™ m√¥n h·ªçc
                    query = "SELECT DISTINCT subject_name FROM subjects LIMIT 20"
                    return self._execute_safe_query(query)
                
            if any(phrase in question_lower for phrase in ['t√†i li·ªáu', 'document']):
                if any(phrase in question_lower for phrase in ['c√≥ nh·ªØng', 'danh s√°ch', 'list']):
                    # Li·ªát k√™ t√†i li·ªáu
                    query = "SELECT document_name, subject_name FROM documents LIMIT 20"
                    return self._execute_safe_query(query)
            
            if any(phrase in question_lower for phrase in ['bao nhi√™u', 'count', 's·ªë l∆∞·ª£ng']):
                if 'm√¥n h·ªçc' in question_lower:
                    query = "SELECT COUNT(*) as total_subjects FROM subjects"
                    return self._execute_safe_query(query)
                elif 't√†i li·ªáu' in question_lower:
                    query = "SELECT COUNT(*) as total_documents FROM documents"
                    return self._execute_safe_query(query)
            
            # Fallback - general search
            return self._general_search(user_question)
            
        except Exception as e:
            return f"L·ªói truy v·∫•n database: {str(e)}"

    def _execute_safe_query(self, query: str) -> str:
        """Execute query safely"""
        try:
            is_valid, validated_query = self.validate_sql_query(query)
            if not is_valid:
                return f"L·ªói validation: {validated_query}"
            
            cursor = self.connection.cursor()
            cursor.execute(validated_query)
            results = cursor.fetchall()
            cursor.close()
            
            if not results:
                return "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o."
            
            # Format results nicely
            return self._format_results(results, validated_query)
            
        except Exception as e:
            return f"L·ªói th·ª±c thi: {str(e)}"

    def _format_results(self, results, query):
        """Format query results for display"""
        if 'COUNT(' in query.upper():
            return f"T·ªïng s·ªë: {results[0][0]}"
        
        if len(results) == 1 and len(results[0]) == 1:
            return str(results[0][0])
        
        # Format as list
        formatted = []
        for i, row in enumerate(results[:10], 1):  # Limit display to 10 rows
            if len(row) == 1:
                formatted.append(f"{i}. {row[0]}")
            else:
                formatted.append(f"{i}. {' - '.join(str(col) for col in row)}")
        
        result_text = "\n".join(formatted)
        if len(results) > 10:
            result_text += f"\n... v√† {len(results) - 10} k·∫øt qu·∫£ kh√°c"
        
        return result_text

