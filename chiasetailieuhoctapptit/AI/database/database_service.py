import os, mysql.connector,sys
from dotenv import load_dotenv
sys.path.append(os.path.join(os.path.dirname(__file__)))
from database_ai import DatabaseAI

load_dotenv()

class Database:
    def __init__(self):
        self.config = {
            'host' : os.getenv('DB_HOST','localhost'),
            'port' : int(os.getenv('DB_PORT',3306)),
            'database' : os.getenv('DB_NAME', 'ChiaSeTaiLieu'),
            'user' : os.getenv('DB_USER'),
            'password' : os.getenv('DB_PASSWORD'),
            'autocommit' : True
        }

        schema_file = os.path.join(os.path.dirname(__file__),'database_info.txt')
        try:
            with open(schema_file, 'r') as f:
                self.schema_info = f.read()
        except FileNotFoundError:
            self.schema_info = "Khong co thong tin database"

        self.ai = DatabaseAI()
    
    def get_connection(self):
        try:
            connection = mysql.connector.connect(**self.config)
            return connection
        except mysql.connector.Error as e:
            return f'Khong vao duoc database: {e}'
        
    def execute_query(self, query):
        try:
            connection = self.get_connection()
            if not connection:
                return {'error' : 'Khong ket noi duoc database'}
            with connection.cursor(dictionary=True) as cursor:
                cursor.execute(query)
                results = cursor.fetchall()
            connection.close()
            return {
                'success' : True,
                'data' : results,
                'count' : len(results),
                'query' : query
            }
        except mysql.connector.Error as e:
            return {"error": f"loi sql: {str(e)}", "sql": query}
        except Exception as e:
            return {"error": f"loi gi do: {str(e)}", "sql": query}

    def get_popular_documents(self, limit=10):
        sql = f"""
        SELECT t.TieuDe, s.HoVaTen, t.LuotXem 
        FROM TaiLieu t 
        JOIN SinhVien s ON t.MaSinhVien = s.MaSinhVien 
        ORDER BY t.LuotXem DESC 
        LIMIT {limit}
        """
        return self.execute_query(sql)
    
    def classify_intent(self, question):
        return self.ai._classify_intent(question)
 
    def smart_database_query(self, question):
        if not self.ai:
            return "Khong co AI"
        try:
            sql = self.ai.generate_sql(question, self.schema_info)

            validation = self.ai.validate_sql(sql)

            if not validation["valid"]:
                return f"{validation['error']}"

            result = self.execute_query(sql)
            if "error" in result:
                return f"{result['error']}"

            if result.get('count', 0) == 0:
                return "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o."
            
            formatted_response = self.ai.format_result(question, sql, result['data'])
            return formatted_response
            
        except Exception as e:
            return f"L·ªói x·ª≠ l√Ω: {str(e)}"
        
    def _improved_keyword_routing(self,question):
        greeting_patterns = [
            "xin ch√†o", "hello", "hi", "ch√†o b·∫°n", "hey", "ch√†o", 
            "good morning", "good afternoon"
        ]
        if any(pattern in question for pattern in greeting_patterns):
            return self._get_greeting_response()
        
        capability_patterns = [
            "b·∫°n c√≥ th·ªÉ l√†m g√¨", "c√≥ th·ªÉ l√†m nh·ªØng g√¨", "ch·ª©c nƒÉng", 
            "what can you do", "kh·∫£ nƒÉng", "t√≠nh nƒÉng"
        ]
        if any(pattern in question for pattern in capability_patterns):
            return self._get_capabilities_response()
        
        help_patterns = [
            "help", "gi√∫p ƒë·ª°", "h∆∞·ªõng d·∫´n", "c√°ch s·ª≠ d·ª•ng", "l√†m th·∫ø n√†o"
        ]
        if any(pattern in question for pattern in help_patterns):
            return self._get_help_response()
        
        database_patterns = [
            "t√†i li·ªáu ph·ªï bi·∫øn", "top t√†i li·ªáu", "th·ªëng k√™ t√†i li·ªáu",
            "t√¨m t√†i li·ªáu", "search t√†i li·ªáu", "c√≥ bao nhi√™u t√†i li·ªáu",
            "t√†i li·ªáu v·ªÅ java", "t√†i li·ªáu v·ªÅ python", "m√¥n h·ªçc",
            "l∆∞·ª£t xem nhi·ªÅu nh·∫•t", "download nhi·ªÅu nh·∫•t"
        ]
        if any(pattern in question for pattern in database_patterns):
            return self.smart_database_query(question)
        
        return self._get_general_fallback()

    def _get_greeting_response(self) -> str:
        return """üëã **Ch√†o m·ª´ng ƒë·∫øn v·ªõi Th∆∞ vi·ªán T√†i li·ªáu PTIT!**

    **T√¥i l√† AI Assistant, c√≥ th·ªÉ gi√∫p b·∫°n:**

    **Th·ªëng k√™ & T√¨m ki·∫øm**
    ‚Ä¢ "T√†i li·ªáu n√†o ph·ªï bi·∫øn nh·∫•t?"
    ‚Ä¢ "Top 10 t√†i li·ªáu v·ªÅ Java"
    ‚Ä¢ "C√≥ bao nhi√™u t√†i li·ªáu v·ªÅ AI?"

    **T√¨m ki·∫øm th√¥ng minh**
    ‚Ä¢ "T√¨m t√†i li·ªáu v·ªÅ Spring Boot"
    ‚Ä¢ "T√†i li·ªáu React m·ªõi nh·∫•t"
    ‚Ä¢ "M√¥n L·∫≠p tr√¨nh Web c√≥ g√¨ hay?"

    **Th√¥ng tin t√°c gi·∫£**
    ‚Ä¢ "Sinh vi√™n n√†o ƒëƒÉng nhi·ªÅu t√†i li·ªáu nh·∫•t?"

    **Xu h∆∞·ªõng**
    ‚Ä¢ "T√†i li·ªáu ƒë∆∞·ª£c xem nhi·ªÅu tu·∫ßn n√†y"
    ‚Ä¢ "Ch·ªß ƒë·ªÅ hot nh·∫•t hi·ªán t·∫°i"

    **G√µ "help" ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt!**

    **H√£y th·ª≠ h·ªèi t√¥i ngay!**"""

    def _get_capabilities_response(self) -> str:
        """Response cho capabilities intent"""
        return """**Kh·∫£ nƒÉng c·ªßa t√¥i - AI Assistant cho Th∆∞ vi·ªán PTIT:**

    **1. T√åM KI·∫æM & TH·ªêNG K√ä**
      T√¨m t√†i li·ªáu theo ch·ªß ƒë·ªÅ, m√¥n h·ªçc
      Th·ªëng k√™ t√†i li·ªáu ph·ªï bi·∫øn, top downloads
      Ph√¢n t√≠ch xu h∆∞·ªõng v√† ranking
      T√¨m ki·∫øm theo t√°c gi·∫£, sinh vi√™n

    **2. PH√ÇN T√çCH D·ªÆ LI·ªÜU**
      Text-to-SQL: Chuy·ªÉn c√¢u h·ªèi ‚Üí truy v·∫•n database
      Th·ªëng k√™ l∆∞·ª£t xem, download, rating
      B√°o c√°o t√†i li·ªáu theo th·ªùi gian
      So s√°nh ƒë·ªô ph·ªï bi·∫øn gi·ªØa c√°c ch·ªß ƒë·ªÅ

    **3. H·ªòI THO·∫†I TH√îNG MINH**
      Hi·ªÉu ng√¥n ng·ªØ t·ª± nhi√™n (ti·∫øng Vi·ªát + English)
      G·ª£i √Ω t√†i li·ªáu ph√π h·ª£p
      Tr·∫£ l·ªùi v·ªõi format ƒë·∫πp, emoji
      Context awareness

    **4. C√îNG NGH·ªÜ S·ª¨ D·ª§NG**
      AI Model: Ollama Gemma 3
      Database: MySQL v·ªõi AI-generated SQL
      API: FastAPI + JSON-RPC
      Language Processing: Vietnamese + English

    **H·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ t√†i li·ªáu!**"""

    def _get_help_response(self) -> str:
        return """**H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng AI Assistant:**

    **C√°c lo·∫°i c√¢u h·ªèi t√¥i c√≥ th·ªÉ tr·∫£ l·ªùi:**

    **1. T√¨m ki·∫øm theo ch·ªß ƒë·ªÅ**
    ```
    ‚Ä¢ "T√¨m t√†i li·ªáu v·ªÅ Python"
    ‚Ä¢ "C√≥ t√†i li·ªáu n√†o v·ªÅ Machine Learning?"
    ‚Ä¢ "List t√†i li·ªáu m√¥n C∆° s·ªü d·ªØ li·ªáu"
    ```

    **2. Th·ªëng k√™ v√† Top lists**
    ```
    ‚Ä¢ "Top 10 t√†i li·ªáu ƒë∆∞·ª£c xem nhi·ªÅu nh·∫•t"
    ‚Ä¢ "T√†i li·ªáu n√†o hot nh·∫•t tu·∫ßn n√†y?"
    ‚Ä¢ "Th·ªëng k√™ t√†i li·ªáu theo m√¥n h·ªçc"
    ```

    **3. Th√¥ng tin t√°c gi·∫£**
    ```
    ‚Ä¢ "Sinh vi√™n n√†o ƒëƒÉng nhi·ªÅu t√†i li·ªáu nh·∫•t?"
    ‚Ä¢ "Th·ªëng k√™ theo ng∆∞·ªùi ƒëƒÉng"
    ```

    **4. L·ªçc v√† s·∫Øp x·∫øp**
    ```
    ‚Ä¢ "T√†i li·ªáu m·ªõi nh·∫•t v·ªÅ React"
    ‚Ä¢ "S·∫Øp x·∫øp theo l∆∞·ª£t download"
    ‚Ä¢ "T√†i li·ªáu c√≥ rating cao nh·∫•t"
    ```

    **5. Xu h∆∞·ªõng v√† ph√¢n t√≠ch**
    ```
    ‚Ä¢ "Ch·ªß ƒë·ªÅ n√†o ƒëang hot?"
    ‚Ä¢ "T√†i li·ªáu ƒë∆∞·ª£c quan t√¢m g·∫ßn ƒë√¢y"
    ‚Ä¢ "So s√°nh ƒë·ªô ph·ªï bi·∫øn Java vs Python"
    ```

    **Tips:** H·ªèi c·ª• th·ªÉ ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi ch√≠nh x√°c!

    **B·∫Øt ƒë·∫ßu h·ªèi ngay!**"""

    def _get_general_fallback(self) -> str:
        """Default fallback response"""
        return """**T√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n.**

    **G·ª£i √Ω c√¢u h·ªèi ph·ªï bi·∫øn:**
    ‚Ä¢ "T√†i li·ªáu v·ªÅ Java ph·ªï bi·∫øn nh·∫•t"
    ‚Ä¢ "C√≥ bao nhi√™u t√†i li·ªáu trong h·ªá th·ªëng?"
    ‚Ä¢ "Top 10 t√°c gi·∫£ c√≥ nhi·ªÅu t√†i li·ªáu nh·∫•t"
    ‚Ä¢ "B·∫°n c√≥ th·ªÉ l√†m g√¨?" - xem kh·∫£ nƒÉng
    ‚Ä¢ "Help" - xem h∆∞·ªõng d·∫´n ƒë·∫ßy ƒë·ªß

    **Ho·∫∑c duy·ªát theo danh m·ª•c:**
    ‚Ä¢ **L·∫≠p tr√¨nh Web** ‚Üí "T√†i li·ªáu React, Vue, Angular"
    ‚Ä¢ **Mobile** ‚Üí "T√†i li·ªáu Flutter, React Native"  
    ‚Ä¢ **AI/ML** ‚Üí "Machine Learning, Deep Learning"
    ‚Ä¢ **Backend** ‚Üí "Spring Boot, Node.js, Python"

    **Th·ª≠ h·ªèi theo c√°ch kh√°c!** """

    def _keyword_based_routing(self,question_lower: str) -> str:
        """Fallback keyword routing"""
        db_keywords = [
            "t√†i li·ªáu v·ªÅ", "top t√†i li·ªáu", "ph·ªï bi·∫øn", "th·ªëng k√™", 
            "bao nhi√™u t√†i li·ªáu", "t√¨m t√†i li·ªáu", "m√¥n h·ªçc"
        ]
        
        if any(keyword in question_lower for keyword in db_keywords):
            return self.smart_database_query(question_lower)
        
        return self._get_general_fallback()
    
    def get_all_documents(self):
        """L·∫•y t·∫•t c·∫£ t√†i li·ªáu t·ª´ database"""
        query = """
        SELECT 
            tl.MaTaiLieu as id,
            tl.TieuDe as title, 
            tl.MoTa as description,
            tl.NgayDang as date_created,
            sv.HoVaTen as author,
            mh.TenMon as subject,
            lt.TenLoai as document_type
        FROM TaiLieu tl
        LEFT JOIN SinhVien sv ON tl.MaSinhVien = sv.MaSinhVien  
        LEFT JOIN vw_MonHoc mh ON tl.MonHoc = mh.MaMon
        LEFT JOIN LoaiTaiLieu lt ON tl.MaLoai = lt.MaLoai
        ORDER BY tl.NgayDang DESC
        LIMIT 100
        """
        result = self.execute_query(query)
        if result.get('success'):
            return result['data']
        return []
    
    def get_document_content(self, doc_id):
        """L·∫•y n·ªôi dung t√†i li·ªáu theo ID"""
        query = f"""
        SELECT 
            tl.TieuDe as title,
            tl.MoTa as description,
            f.DuongDan as file_path,
            f.TenFile as filename
        FROM TaiLieu tl
        LEFT JOIN File f ON tl.MaFile = f.MaFile
        WHERE tl.MaTaiLieu = {doc_id}
        """
        result = self.execute_query(query)
        if result.get('success') and result['data']:
            doc = result['data'][0]
            # N·∫øu c√≥ file PDF, extract text
            if doc['file_path'] and doc['file_path'].endswith('.pdf'):
                try:
                    sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'mcp'))
                    text_content = self.ai.pdf_processor.extract_text_from_pdf(doc['file_path'])
                    return f"Ti√™u ƒë·ªÅ: {doc['title']}\n\nM√¥ t·∫£: {doc['description']}\n\nN·ªôi dung:\n{text_content}"
                except:
                    pass
            return f"Ti√™u ƒë·ªÅ: {doc['title']}\n\nM√¥ t·∫£: {doc['description']}"
        return "Kh√¥ng t√¨m th·∫•y t√†i li·ªáu"
    
    def get_documents_by_subject(self, subject):
        """L·∫•y t√†i li·ªáu theo m√¥n h·ªçc"""
        query = f"""
        SELECT 
            tl.MaTaiLieu as id,
            tl.TieuDe as title,
            tl.MoTa as description,
            tl.NgayDang as date_created
        FROM TaiLieu tl
        LEFT JOIN vw_MonHoc mh ON tl.MonHoc = mh.MaMon
        WHERE mh.TenMon LIKE '%{subject}%'
        ORDER BY tl.NgayDang DESC
        """
        result = self.execute_query(query)
        if result.get('success'):
            return result['data']
        return []